#
# Copyright (c) 2023 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

cmake_minimum_required(VERSION 3.20.0)

find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
project(environmental_module_test)

test_runner_generate(src/main.c)

target_sources(app
  PRIVATE
  src/main.c
  ../../../app/src/modules/environmental/environmental.c
  ../../../app/src/common/message_channel.c
)

zephyr_include_directories(${ZEPHYR_BASE}/include/zephyr/)
zephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)
zephyr_include_directories(../../../app/src/common)


target_link_options(app PRIVATE --whole-archive)
# Options that cannot be passed through Kconfig fragments
target_compile_definitions(app PRIVATE
	-DCONFIG_APP_PAYLOAD_CHANNEL_STRING_MAX_SIZE=100
	-DCONFIG_APP_ENVIRONMENTAL_LOG_LEVEL=4
	-DCONFIG_APP_ENVIRONMENTAL_THREAD_STACK_SIZE=1024
	-DCONFIG_APP_ENVIRONMENTAL_MESSAGE_QUEUE_SIZE=5
	-DCONFIG_APP_ENVIRONMENTAL_EXEC_TIME_SECONDS_MAX=3
	-DCONFIG_APP_ENVIRONMENTAL_WATCHDOG_TIMEOUT_SECONDS=120
)

# generate encoder code using zcbor
set(zcbor_command
	zcbor code # Invoke code generation
	--cddl ${ZEPHYR_BASE}/subsys/net/lib/lwm2m/lwm2m_senml_cbor.cddl
	--cddl ${APPLICATION_SOURCE_DIR}/../../../app/src/modules/environmental/env_object.cddl
	--encode # Generate encoding functions
	--short-names # Attempt to make generated symbol names shorter (at the risk of collision)
	-t env-object # Create a public API for decoding/encoding the "board_config" type from the cddl file
	--output-cmake ${CMAKE_CURRENT_BINARY_DIR}/env_object.cmake # The generated cmake file will be placed here
)
execute_process(COMMAND ${zcbor_command} COMMAND_ERROR_IS_FATAL ANY)

# Include the cmake file generated by zcbor. It adds the
# generated code and the necessary zcbor C code files.
include(${CMAKE_CURRENT_BINARY_DIR}/env_object.cmake)

zephyr_link_libraries(env_object)
target_link_libraries(env_object PRIVATE zephyr_interface)
